// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id          String    @id @default(cuid())
  title       String
  observation String?
  createdAt   DateTime  @default(now())
  priority    String    @default("normal") // baja, normal, alta
  posponedAt  DateTime?
  completedAt DateTime?
  status      String    @default("pendiente") // pendiente, en progreso, completada, pospueta
  userId      String
  employeeId  String?
  imagesId    String?
  printerId   String?
  computerId  String?

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee    Employee?     @relation(fields: [employeeId], references: [id])
  images      Image?        @relation(fields: [imagesId], references: [id])
  printer     Printer?      @relation(fields: [printerId], references: [id])
  computer    Computer?     @relation(fields: [computerId], references: [id])
  SubActivity SubActivity[]
}

model SubActivity {
  id          String   @id @default(cuid())
  title       String
  createdAt   DateTime @default(now())
  isCompleted Boolean  @default(false)
  activityId  String

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model Employee {
  id         String  @id @default(cuid())
  fullName   String
  email      String?
  phone      String?
  dependency String  @default("Sin especificar")

  Activity Activity[]
}

model Computer {
  id          String   @id @default(cuid())
  brand       String
  model       String
  serial      String
  processor   String
  ram         Float
  storage     Float
  os          String
  peripherals String[]
  type        String   @default("desktop") // laptop, desktop, server
  status      String   @default("activo") // activo, inactivo, en reparación
  imageId     String?

  imageRel         Image?             @relation(fields: [imageId], references: [id])
  AssignedComputer AssignedComputer[]
  Activity         Activity[]
}

model Printer {
  id         String  @id @default(cuid())
  brand      String
  model      String
  serial     String
  inkDetails String
  type       String  @default("laser") // laser, inyección, matriz
  status     String  @default("activo") // activo, inactivo, en reparación
  imageId    String?

  imageRel Image?     @relation(fields: [imageId], references: [id])
  Activity Activity[]
}

model AssignedComputer {
  id           String  @id @default(cuid())
  location     String
  observations String?
  userPc       String
  password     String
  anydeskCode  String
  userId       String
  computerId   String

  userCuid User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  computer Computer? @relation(fields: [computerId], references: [id])
}

model Image {
  id           String @id @default(cuid())
  cloudinaryId String
  secureUrl    String

  Printer  Printer[]
  Computer Computer[]
  Activity Activity[]
}

// Auth New Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  lastName      String?
  password      String?
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime?

  Activity         Activity[]
  AssignedComputer AssignedComputer[]
  Account          Account[]
  Session          Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

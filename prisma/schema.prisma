// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id          String    @id @default(cuid())
  title       String
  observation String?
  createdAt   DateTime  @default(now())
  priority    String    @default("normal") // baja, normal, alta
  posponedAt  DateTime?
  completedAt DateTime?
  status      String    @default("pendiente") // pendiente, en progreso, completada, pospueta
  userId      String
  employeeId  String?

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee    Employee?     @relation(fields: [employeeId], references: [id])
  SubActivity SubActivity[]
}

model SubActivity {
  id          String   @id @default(cuid())
  title       String
  createdAt   DateTime @default(now())
  isCompleted Boolean  @default(false)
  activityId  String

  activity Activity @relation(fields: [activityId], references: [id])
}

model Employee {
  id         String  @id @default(cuid())
  fullName   String
  email      String?
  phone      String?
  dependency String  @default("Sin especificar")

  Activity Activity[]
}

// Auth New Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  lastName      String?
  password      String?
  roles         String[]   @default(["user"])
  isActive      Boolean    @default(true)
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Activity      Activity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
